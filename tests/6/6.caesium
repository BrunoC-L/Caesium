type A:
    using C = B

type B:
    using C = B

type T:
    A<B> a
    B::C b
    A<B>::C c
    A<B::C> d

type F:

type E:
    using G = A
    using T = F

type R:
    using C = A<B>
    using K = F<B, C>
    E<K>::T<B, C> member1
    E<K>::G method1(K k, C u):

Int main():
    Set<Int> someContainer = {}
    for i in someContainer:

    Int u = {}
    u = u * u
    u == u
    Vector<Int> arr = {}
    for i in arr:

    ifor i, e in arr:
        ++k
        k++
        --k
        k--
        k+=1
        k-=1
        k * 1
        k + 1
        k - 1
        1 % k
        
    while true:
        return x if z else y
        break
        break if x or z and y
    
    return y if x else u if k

    Map<Int, String> m = {}
    for k, v in m.entries(normal()[][x,z,y]):
        (k)[k][k,k.k()[k]]+=k
        u = k if 1 else 0
        if b == c:
            b += c
        else:
            c += b
