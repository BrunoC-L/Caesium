type A:
    using C = B

type B:
    using C = B

type T:
    A<B> a
    B::C b
    A<B>::C c
    A<B::C> d

type F:

type E:
    using G = A
    using T = F

type R:
    using C = A<B>
    using K = F<B, C>
    E<K>::T<B, C> member1
    E<K>::G method1(K k, C u):

Int main():
    Set<Int> someContainer = {}
    for i in someContainer:

    Int u = {}
    u = u * u
    u == u
    Vector<Int> arr = {}
    for i in arr:

    for k in arr:
        ++k
        k++
        --k
        k--
        k+=1
        k-=1
        k * 1
        k + 1
        k - 1
        1 % k
    
    return y if x else u if k

    Map<Int, String> m = {}

    for k, v in m:
        Int u = 0
        if k == 1:
            u = k + k
        else:
            u = k - k
    
    m.at()
