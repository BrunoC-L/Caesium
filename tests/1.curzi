class A:
    using C = B

class B:
    using C = B

class T:
    A<B> a
    B::C b
    A<B>::C c
    A<B::C> d

class F:

class E:
    using G = A
    using T = F

class R extends F<V,F<U, V>>, F<E<B>,A<B>>:
    using C = A<B>
    using K = F<B, C>
    E<K>::T<B, C> member1
    E<K>::G method1(K k, C u):
        Set<int> someContainer
        for i in someContainer:

        int arr
        for i in arr:

        Map<int, std::string> m
        for k, v in m.entries(normal()[][x,z,y]):
