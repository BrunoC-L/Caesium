import tokens

template Pair<T, U>:
    type Pair:
        `T` first
        `U` second

template back<T>:
    `T` back(Vector<`T`> ref vec):
        return vec[vec.size() - 1]

using TOKENVALUE = Pair<TOKENS, String>
using Iterator = Vector<TOKENVALUE>::iterator
type tokens_and_iterator:
	Vector<TOKENVALUE> tokens
    Int it

type Tokenizer:
	String program
	Int index

Vector<TOKENVALUE> read(Tokenizer ref! tk):
	Vector<TOKENVALUE> out = {}
	out.reserve(tk.program.size())
	if tk.program.size() != 0:
		while True:
			TOKENVALUE t = readToken(tk.program, tk.index)
			out.push(t)
			if t.first != TOKENS::END:
				break
		// this allows for files not to end with a new line, we add it manually so we can later act as if all files end with a new line
		if out.size():
//			out.back().first = NEWLINE // replace END with newline
			out.push(TOKENVALUE{TOKENS::END, ""}) // add the new END
	else:
		out.push(TOKENVALUE{TOKENS::END, ""})
	return out


Bool isNum(Char val c):
    return c >=? '0' and c <=? '9'

Bool isStartOfWord(Char val c):
    return c >=? 'a' and c <=? 'z' or c >=? 'A' and c <=? 'Z' or c == '_'

Bool isPartWord(Char val c):
    return isNum(c) or isStartOfWord(c)

String parseWord(String ref program, Int ref! index):
    if !isStartOfWord(program.at(index)):
        return ""
    String out = ""
    while index != program.size():
        Char c = program.at(index)
        if isPartWord(c):
            out = out + c
            index = index + 1
        else:
            break
    return out

String parseInt(String ref program, Int ref! index):
	String out = ""
	while index != program.size():
		Char c = program.at(index)
		if isNum(c):
			out = out + c
			index = index + 1
		else:
			break
	return out

TOKENS peek(String ref program, Int ref! index):
	unsigned peekFrom = index
	while True:
		TOKENVALUE v = readToken(program, ref! index)
		if v.first == SPACE or v.first == TAB or v.first == NEWLINE:
			continue
		index = peekFrom
		return v.first

//TOKENS peek(String ref program, Int ref! index, Int val n):
//	unsigned peekFrom = index
//	TOKENS v = peek(program, copy n)
//    Int i = 0
//    while i <? n:
//		v = peek(program, copy n)
//	index = peekFrom
//	return v

TOKENVALUE readToken(String ref program, Int ref! index):
	if index == program.size():
		return{ TOKENS::END, "" }
	Char c = program.at(index)
	String str = ""
//	switch c:
//        c:
//        '\\':
//            // backslash at the end of a line means ignore it and the newline
//            if index + 1 <=? program.size() and program.at(index + 1) == '\n':
//                index = index + 1
//                // so we just return the next token
//                return readToken(program, ref! index)
//            // else assume the backslash makes sense in context
//            return { TOKENS::BACKSLASH, "\\" }
//        // string begin
//        '\'':
//        '`':
//        '"':
//            while True:
//                index = index + 1
//                if index == program.size():
//                    //throw std::runtime_error("Reached end of file before end of string, parsed so far: " + str)
//                if program.at(index) == '\\' and index + 1 <=? program.size() and program.at(index + 1) == c:
//                    // backslash with open string character means dont close the string
//                    // but all our transpiled strings use " for strings so we just replace that
//                    index = index + 1
//                    str = str + "\\\""
//                else:
//                    // close string
//                    if program.at(index) == c:
//                        index = index + 1
//                        // the transpiled string uses " always, not ' or `
//                        return { TOKENS::STRING, "\"" + str + "\"" }
//                    // in case there are " in the string and the string uses ' or `, we need to replace them accordingly since
//                    // our transpiled c++ string uses "
//                    // so we just escape out of " not to end the string and the user will have his " in the string as expected
//                    else if c != '"' and program.at(index) == '"':
//                        str = str + "\\\""
//                    else:
//                        str = str + program.at(index)
//            std::unreachable()
//        '{':
//            index = index + 1
//            return { TOKENS::BRACEOPEN, "{" }
//        '}':
//            index = index + 1
//            return { TOKENS::BRACECLOSE, "}" }
//        '(':
//            index = index + 1
//            return { TOKENS::PARENOPEN, "(" }
//        ')':
//            index = index + 1
//            return { TOKENS::PARENCLOSE, ")" }
//        '[':
//            index = index + 1
//            return { TOKENS::BRACKETOPEN, "[" }
//        ']':
//            index = index + 1
//            return { TOKENS::BRACKETCLOSE, "]" }
//        ' ':
//            if index + 3 <? program.size() and program.at(index + 1) == ' ' and program.at(index + 2) == ' ' and program.at(index + 3) == ' ':
//                index = index + 4
//                return { TOKENS::TAB, "\t" }
//            index = index + 1
//            return { TOKENS::SPACE, " " }
//        '\n':
//            index = index + 1
//            return { TOKENS::NEWLINE, "\n" }
//        '\t':
//            index = index + 1
//            return { TOKENS::TAB, "\t" }
//        '.':
//            if index + 2 <? program.size() and program.at(index + 1) == '.' and program.at(index + 2) == '.':
//                index = index + 3
//                return { TOKENS::DOTS, "..." }
//            index = index + 1
//            return { TOKENS::DOT, "." }
//        ';':
//            index = index + 1
//            return { TOKENS::SEMICOLON, ";" }
//        ':':
//            index = index + 1
//            if index <? program.size() and program.at(index) == ':':
//                index = index + 1
//                return { TOKENS::NS, "::" }
//            return { TOKENS::COLON, ":" }
//        ',':
//            index = index + 1
//            return { TOKENS::COMMA, "," }
//        '=':
//            index = index + 1
//            if index <? program.size() and program.at(index) == '=':
//                index = index + 1
//                return { TOKENS::EQUALEQUAL, "==" }
//            return { TOKENS::EQUAL, "=" }
//        '!':
//            index = index + 1
//            if index <? program.size() and program.at(index) == '=':
//                index = index + 1
//                return { TOKENS::NEQUAL, "!=" }
//            return { TOKENS::NOT, "!" }
//        '<':
//            index = index + 1
//            if index <? program.size():
//                if program.at(index) == '=':
//                    index = index + 1
//                    if index <? program.size():
//                        if program.at(index) == '?':
//                            index = index + 1
//                            return { TOKENS::LTEQ, "<=??" }
//                    return { TOKENS::LTE, "<=?" }
//                if program.at(index) == '?':
//                    index = index + 1
//                    return { TOKENS::LTQ, "<?" }
//            return { TOKENS::LT, "<" }
//        '>':
//            index = index + 1
//            if index <? program.size():
//                if program.at(index) == '=':
//                    index = index + 1
//                    if index <? program.size():
//                        if program.at(index) == '?':
//                            index = index + 1
//                            return { TOKENS::GTEQ, ">=??" }
//                    return { TOKENS::GTE, ">=?" }
//                if program.at(index) == '?':
//                    index = index + 1
//                    return { TOKENS::GTQ, ">?" }
//            return { TOKENS::GT, ">" }
//        '-':
//            index = index + 1
//            if index <? program.size():
//                if program.at(index) == '=':
//                    index = index + 1
//                    return { TOKENS::MINUSEQUAL, "-=" }
//                else if program.at(index) == '-':
//                    index = index + 1
//                    return { TOKENS::MINUSMINUS, "--" }
//            return { TOKENS::DASH, "-" }
//        '+':
//            index = index + 1
//            if index <? program.size():
//                if program.at(index) == '=':
//                    index = index + 1
//                    return { TOKENS::PLUSEQUAL, "+=" }
//                else if program.at(index) == '+':
//                    index = index + 1
//                    return { TOKENS::PLUSPLUS, "++" }
//            return { TOKENS::PLUS, "+" }
//        '*':
//            index = index + 1
//            if index <? program.size() and program.at(index) == '=':
//                index = index + 1
//                return { TOKENS::TIMESEQUAL, "*=" }
//            return { TOKENS::ASTERISK, "*" }
//        '/':
//            index = index + 1
//            // skip // comments
//            if index <? program.size() and program.at(index) == '/':
//                index = index + 1
//                while index <? program.size():
//                    if program.at(index) == '\n':
//                        index = index + 1
//                        break
//                    else:
//                        index = index + 1
//                return readToken(tk.program, tk.index)
//            // skip /* */ comments
//            if index <? program.size() and program.at(index) == '*':
//                index = index + 1
//                while index + 1 <? program.size():
//                    if program.at(index) == '*' and program.at(index + 1) == '/':
//                        index = index + 2
//                        break
//                    else:
//                        index = index + 1
//                return readToken(tk.program, tk.index)
//            if index <? program.size() and program.at(index) == '=':
//                index = index + 1
//                return { TOKENS::DIVEQUAL, "/=" }
//            return { TOKENS::SLASH, "/" }
//        '%':
//            index = index + 1
//            if index <? program.size() and program.at(index) == '=':
//                index = index + 1
//                return { TOKENS::MODEQUAL, "%=" }
//            return { TOKENS::PERCENT, "%" }
//        '&':
//            index = index + 1
//            if index <? program.size():
//                if program.at(index) == '&':
//                    index = index + 1
//                    return { TOKENS::ANDAND, "and" }
//                else if program.at(index) == '=':
//                    index = index + 1
//                    return { TOKENS::ANDEQUAL, "&=" }
//            //throw std::runtime_error("Unknown Symbol `&`")
//        '?':
//            index = index + 1
//            return { TOKENS::QUESTION, "?" }
//        '#':
//            index = index + 1
//            return { TOKENS::POUND, "#" }
//        '^':
//            index = index + 1
//            if index + 1 <=? program.size() and program.at(index) == '^':
//                index = index + 1
//                return { TOKENS::XOREQUAL, "^=" }
//            return { TOKENS::CARET, "^" }
//        '|':
//            index = index + 1
//            if index + 1 <=? program.size():
//                if program.at(index) == '|':
//                    index = index + 1
//                    return { TOKENS::OROR, "or" }
//                else if program.at(index) == '=':
//                    index = index + 1
//                    return { TOKENS::OREQUAL, "|=" }
//            return { TOKENS::BITOR, "|" }
        
	String word = parseWord(program, ref! index)
	if word.size():
		if word == "and":
            return { TOKENS::AND, word }
		if word == "auto":
            return { TOKENS::AUTO, word }
		if word == "break":
            return { TOKENS::BREAK, word }
		if word == "block":
            return { TOKENS::BLOCK, word }
		if word == "case":
            return { TOKENS::CASE, word }
		if word == "class":
            return { TOKENS::CLASS, word }
		if word == "do":
            return { TOKENS::DO, word }
		if word == "else":
            return { TOKENS::ELSE, word }
		if word == "for":
            return { TOKENS::FOR, word }
		if word == "if":
            return { TOKENS::IF, word }
		if word == "interface":
            return { TOKENS::INTERFACE, word }
		if word == "ifor":
            return { TOKENS::IFOR, word }
		if word == "import":
            return { TOKENS::IMPORT, word }
		if word == "from":
            return { TOKENS::FROM, word }
		if word == "in":
            return { TOKENS::IN, word }
		if word == "match":
            return { TOKENS::MATCH, word }
		if word == "or":
            return { TOKENS::OR, word }
		if word == "return":
            return { TOKENS::RETURN, word }
		if word == "static":
            return { TOKENS::STATIC, word }
		if word == "switch":
            return { TOKENS::SWITCH, word }
		if word == "using":
            return { TOKENS::USING, word }
		if word == "while":
            return { TOKENS::WHILE, word }
		if word == "type":
            return { TOKENS::TYPE, word }
		if word == "template":
            return { TOKENS::TEMPLATE, word }
		if word == "copy":
            return { TOKENS::COPY, word }
		if word == "move":
            return { TOKENS::MOVE, word }
		if word == "ref":
            return { TOKENS::REF, word }
		if word == "val":
            return { TOKENS::VAL, word }
        
		return { TOKENS::WORD, word }
        
	String num = parseInt(program, ref! index)
	if !num.size():
		//throw std::exception()
	if index != program.size() and program.at(index) == '.':
		index = index + 1
		String part2 = parseInt(program, ref! index)
		if part2.size():
			return { TOKENS::FLOATING_POINT_NUMBER, num + "." + part2 }
	return { TOKENS::INTEGER_NUMBER, num }
