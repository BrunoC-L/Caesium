import primitives

using Word = Token<WORD>
using String = Token<STRING>
using Newline = Token<NEWLINE>

using Expression = ConditionalExpression
using Import = And<Star<Token<NEWLINE>>, Token<IMPORT>, Or<Word, String>, Newline>
using Alias = And<Token<USING>, Word, Token<EQUAL>, Typename, Newline>
using ParameterCategory = Or<Token<VAL>, And<Token<REF>, Token<NOT>>, Token<REF>>
using ArgumentCategory = Or<Token<COPY>, Token<MOVE>, And<Token<REF>, Token<NOT>>, Token<REF>>
using FunctionParameter = And<Typename, ParameterCategory, Word>
using FunctionParameters = CommaStar<FunctionParameter>
using ColonIndentCodeBlock = And<Token<COLON>, Newline, Indent<Star<Or<Token<NEWLINE>, Statement>>>>
using Function = And<Typename, Word, Token<PARENOPEN>, FunctionParameters, Token<PARENCLOSE>, ColonIndentCodeBlock>
using ParenArguments = And<Token<PARENOPEN>, CommaStar<FunctionArgument>, Token<PARENCLOSE>>
using BraceArguments = And<Token<BRACEOPEN>, CommaStar<FunctionArgument>, Token<BRACECLOSE>>
using BracketArguments = And<Token<BRACKETOPEN>, CommaStar<FunctionArgument>, Token<BRACKETCLOSE>>
using TemplateArguments = And<Token<LT>, CommaStar<Expression>, Token<GT>>

using BaseTypename = Or<Token<AUTO>, Word>
using NamespaceTypenameExtension = And<Token<NS>, BaseTypename>
using TemplateTypenameExtension = And<Token<LT>, CommaStar<Alloc<Typename>>, Token<GT>>
using UnionTypenameExtension = And<Token<BITOR>, Alloc<Typename>>

using Typename = And<BaseTypename, Star<Or<NamespaceTypenameExtension, TemplateTypenameExtension, UnionTypenameExtension>>>

using MemberVariable = And<Typename, Word, Newline>
using TypeElement = Or<Alias, MemberVariable>

using Construct = And<Typename, BraceArguments>

using ParenExpression = Or<Construct,Word,Token<FLOATING_POINT_NUMBER>,Token<INTEGER_NUMBER>,Token<STRING>,ParenArguments,BracketArguments,BraceArguments>
using Postfix = Or<And<Token<DOT>,Word,ParenArguments>,And<Token<DOT>,Word>,ParenArguments,BracketArguments,TemplateArguments,And<Token<NS>, Word>>
using PostfixExpression = And<ParenExpression,Star<Postfix>>

using unary_operators = Or<Token<DASH>, Token<NOT>>
using UnaryExpression = Alloc<And<Star<unary_operators>, PostfixExpression>>
using MultiplicativeExpression = And<UnaryExpression, Star<And<Or<Token<ASTERISK>, Token<SLASH>, Token<PERCENT>>, UnaryExpression>>>
using AdditiveExpression = And<MultiplicativeExpression, Star<And<Or<Token<PLUS>, Token<DASH>>, MultiplicativeExpression>>>
using CompareOperator = Or<Token<LTQ>, Token<LTEQ>, Token<GTQ>, Token<GTEQ>>
using CompareExpression = And<AdditiveExpression, Star<And<CompareOperator, AdditiveExpression>>>
using EqualityExpression = And<CompareExpression, Star<And<Or<Token<EQUALEQUAL>, Token<NEQUAL>>, CompareExpression>>>
using AndExpression = And<EqualityExpression, Star<And<Token<AND>, EqualityExpression>>>
using OrExpression = And<AndExpression, Star<And<Token<OR>, AndExpression>>>
using ConditionalExpression = And<OrExpression,Opt<And<Token<IF>,OrExpression,Token<ELSE>,OrExpression>>>
