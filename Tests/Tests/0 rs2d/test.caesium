exists:
    sf:
        type Time:
        type Clock:
        sf_time getElapsedTime(Vlock ref _):
        Int asMicroseconds(Time ref _):
        Void restart(Clock ref _):

        type TcpSocket:
        type TcpListener:
        type SocketSelector:
        type Socket:
    sf__Socket:
        type Status:

template Tuple<Ts...>:
    type Tuple:
        #ifor i, T in type_list<`Ts...`>:
            T ref ? member_##i

template provide<Ts..., U>:
    Void provide(ServerServiceProvider<`Ts...`> ref! provider, `U` ref service):
        #Bool found = False
        #ifor i, T in type_list<`Ts...`>:
            #if T == `U`/*<`Ts...`>*/:
                #found = True
                provider.service##i = { ref service }
        #if !found:
            #compile_time_error()

template request<Ts..., U>:
    `U` ref request(ServerServiceProvider<`Ts...`> ref provider):
        #Bool found = False
        #ifor i, T in type_list<`Ts...`>:
            #if T == `U`:
                #found = True
                return provider.service##i
        #if !found:
            #compile_time_error()

using ServerServiceProviderImpl = ServerServiceProvider<DB>

type DB:
    ServerServiceProviderImpl ref provider

// type ObjectFactory:
// type Map:
// type UserService:
// type PlayerActionService:
// type SocketServerService:
// type ClockTickScheduler:
// type TaskScheduler:
// type ObjectService:
// type App:

Int main(Vector<String> ref args):
	// srand(time(NULL));
    ServerServiceProviderImpl provider = { { None } }
    DB db = { provider }
    Int? x = 0
    provide<DB, DB>(provider, db)
//    provider.provide<DB, DB>(db)
//    db.provide<DB, DB>(provider)
//    (provider, db).provide<DB, DB>()

//    auto db_ref = provider.request()

//    Int a = 0
//    Int b = 1
//    Bool c = a > ? b
    
	// DB db(&provider, 5);
	// ObjectFactory objf;
	// Map map(&provider, objf);
	// UserService userService(&provider);
	// PlayerActionService playerActionService(&provider);
	// SocketServerService server(&provider, 38838);
	// ClockTickScheduler tickScheduler;
	// TaskScheduler scheduler(&provider);
	// ObjectService os(&provider);
	// App app(&provider, &tickScheduler);
	// app.init();
	// app.start();

    return 0
