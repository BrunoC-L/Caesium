exists:
    sf:
        type Time:
        type Clock:
        sf_time getElapsedTime(Vlock ref _):
        Int asMicroseconds(Time ref _):
        Void restart(Clock ref _):

        type TcpSocket:
        type TcpListener:
        type SocketSelector:
        type Socket:
    sf__Socket:
        type Status:

template tuple_of_optionals<Ts...>:
    type tuple_of_optionals:
        #ifor i, T in type_list<`Ts...`>:
            T? member_##i

template add<Ts..., U>:
    tuple_of_optionals<`Ts...`> add(tuple_of_optionals<`Ts...`> val services, `U` val service):
        #Bool found = False
        #ifor i, T in type_list<`Ts...`>:
            #if T == `U`/*<`Ts...`>*/:
                #found = True
                services.service##i = { ref service }
        #if !found:
            #compile_time_error()
        return services

template request<Ts..., U>:
    `U` ref request(tuple_of_optionals<`Ts...`> ref services):
        #Bool found = False
        #ifor i, T in type_list<`Ts...`>:
            #if T == `U`:
                #found = True
                return services.service##i
        #if !found:
            #compile_time_error()

using Services = tuple_of_optionals<DB>

type DB:
    Services ref services

// type ObjectFactory:
// type Map:
// type UserService:
// type PlayerActionService:
// type SocketServerService:
// type ClockTickScheduler:
// type TaskScheduler:
// type ObjectService:
// type App:

Int main(Vector<String> ref args):
	// srand(time(NULL));
    Services services = { { None } }
    DB db = { services }
    Int? x = 0
    provide<DB, DB>(services, db)
//    services.provide<DB, DB>(db)
//    db.provide<DB, DB>(services)
//    (services, db).provide<DB, DB>()

//    auto db_ref = services.request()

//    Int a = 0
//    Int b = 1
//    Bool c = a > ? b
    
	// DB db(&services, 5);
	// ObjectFactory objf;
	// Map map(&services, objf);
	// UserService userService(&services);
	// PlayerActionService playerActionService(&services);
	// SocketServerService server(&services, 38838);
	// ClockTickScheduler tickScheduler;
	// TaskScheduler scheduler(&services);
	// ObjectService os(&services);
	// App app(&services, &tickScheduler);
	// app.init();
	// app.start();

    return 0
